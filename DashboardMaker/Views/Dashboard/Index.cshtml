@{
	Layout = null;
}
<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="~/css/sideBar.css" />
	<link href="~/lib/font-awesome/css/fontawesome.css" rel="stylesheet" type="text/css" />
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<style>
		.flex-container {
			display: flex;
			flex-direction: row;
		}

		.sidebar {
			width: 20%;
		}

		#visualizationsContainer {
			width: 80%;
		}

		.graph {
			width: 300px;
			margin-right: 10px;
		}

		#innerContainer {
			display: flex;
			flex-wrap: wrap;
			gap: 5px;
		}
	</style>
</head>
<body>

	<div class="flex-container">
		<div class="sidebar">
			<a class="active">Dashboard Maker</a>
			<select id="dashboardDropdown" style="width:80%;"></select>
			<a href="/Dashboard/Create"><i class="fa-solid fa-table-columns m-auto"></i> New Dashboard</a>
			<a href="/Visualization/Create" id="createVisualizationLink"><i class="fa fa-bar-chart m-auto"></i>New Visualization</a>
			<a href="/DataSource/Add"><i class="fa fa-database m-auto"></i>New Data Source</a>
			<a href="/ColorPalette/Create"><i class="fa fa-palette m-auto"></i>New Color Palette</a>
			<!-- Logout Link -->
			<a href="/Identity/Account/Logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
		</div>


		<div id="visualizationsContainer" class="container-fluid">
			<div id="innerContainer">
			</div>
		</div>

	</div>

</body>
</html>
<script src="~/lib/font-awesome/js/all.js"></script>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		fetch('/api/Dashboard/GetUserDashboards')
			.then(response => {
				return response.json();
			})
			.then(data => {
				populateDropdown(data);
			})
			.catch(error => {
				console.error('Error fetching data:', error);
			});

		const dropdown = document.getElementById('dashboardDropdown');
		dropdown.addEventListener('change', function () {
			const selectedDashboardId = this.value;
			const createVisualizationLink = document.getElementById('createVisualizationLink');
			createVisualizationLink.href = '/Visualization/Create/' + selectedDashboardId;
			fetchAndDisplayVisualizations(selectedDashboardId);
			const container = document.getElementById('innerContainer');
			container.innerHTML = ''
		});

		function populateDropdown(data) {
			const dropdown = document.getElementById('dashboardDropdown');
			const option = new Option("Choose a dashboard", 0);
			dropdown.add(option);
			data.forEach(item => {
				const option = new Option(item.title, item.id);
				dropdown.add(option);
			});
		}

		function fetchAndDisplayVisualizations(dashboardId) {
			fetch(`/api/Visualization/GetByDashboard/${dashboardId}`)
				.then(response => response.json())
				.then(visualizations => {
					// Step 1: Save or process the visualization data
					// Step 2: Fetch additional data based on the visualizations
					visualizations.forEach(visualization => {
						getDataToBePlotted(visualization).then(Data => {
							// Step 3: Display data
							displayVisualizations(visualization, Data);
						});
					});
				})
				.catch(error => {
					console.error('Error fetching visualizations:', error);
				});
		}

		async function getDataToBePlotted(visualization) {
			try {
				const response = await fetch(`/api/Kata/GetDataForAGraph/${visualization.id}`);
				if (!response.ok) {
					throw new Error(`Network response was not ok: ${response.statusText}`);
				}

				const data = await response.json(); // Parse JSON response
				if (Array.isArray(data)) {
					// Assuming the data is an array of RowData objects
					return data.map(row => {
						if (!Array.isArray(row.columns)) {
							console.error('Row does not contain a Columns array:', row);
							return {};
						}

						return row.columns.reduce((obj, column) => {
							obj[column.columnName] = column.value;
							return obj;
						}, {});
					});
				} else {
					// Handle other responses like error messages
					console.error('Response is not in the expected format:', data);
					return [];
				}
			} catch (error) {
				console.error('There was a problem with your fetch operation:', error);
				throw error;
			}
		}


		function displayVisualizations(visualization, Data) {
			// Determine the type of visualization and render accordingly
			switch (visualization.visualizationTypeId) {
				case 2:
					renderLineChart(visualization, Data);
					break;
				case 1:
					renderBarChart(visualization, Data);
					break;
				case 3:
					renderPieChart(visualization, Data);
					break;
				default:
					console.error('Unsupported visualization type:', visualization.type);
			}
		}

		function renderLineChart(visualization, data) {
			addCanvasToContainer(visualization.id);

			let labels = [];
			let values = [];

			data.forEach(item => {
				const keys = Object.keys(item);
				if (keys.length === 2) {
					labels.push(item[keys[0]]);
					values.push(item[keys[1]]);
				}
			});

			const ctx = document.getElementById(visualization.id).getContext('2d');

			// Fetch color for the line chart asynchronously
			getRandomColorFromColorPalette(visualization.colorPaletteId).then(lineColor => {
				// Now lineColor is a resolved color string
				// Create and draw the line chart using Chart.js
				const myLineChart = new Chart(ctx, {
					type: 'line',
					data: {
						labels: labels,
						datasets: [{
							label: visualization.title,
							data: values,
							backgroundColor: lineColor,
							borderColor: lineColor,
							borderWidth: 1,
							fill: false
						}]
					},
					options: {
						scales: {
							y: {
								beginAtZero: true
							}
						}
					}
				});
			}).catch(error => {
				console.error('Error fetching color:', error);
				// Handle error or set default color
			});
		}




		function renderBarChart(visualization, data) {
			// Create a canvas element and add it to div visualizationsContainer
			addCanvasToContainer(visualization.id);

			// Count the occurrences of data
			const occurrences = countOccurrences(data);

			// Extract labels for the chart
			const labels = Object.keys(occurrences);

			// Get colors for each label asynchronously
			const colorPromises = labels.map(() => getRandomColorFromColorPalette(visualization.colorPaletteId));

			Promise.all(colorPromises).then(backgroundColors => {
				// Now backgroundColors is an array of resolved color strings
				console.log(backgroundColors);

				const borderColors = backgroundColors.map(color => hexToRgba(color, 1));

				// Continue with creating the chart here
				const chartData = Object.values(occurrences);
				const ctx = document.getElementById(visualization.id).getContext('2d');

				// Create and draw the bar chart using Chart.js
				const myBarChart = new Chart(ctx, {
					type: 'bar',
					data: {
						labels: labels,
						datasets: [{
							label: visualization.title,
							data: chartData,
							backgroundColor: backgroundColors,
							borderColor: borderColors,
							borderWidth: 1
						}]
					},
					options: {
						scales: {
							y: {
								beginAtZero: true
							}
						}
					}
				});
			}).catch(error => {
				console.error('Error fetching colors:', error);
				// Handle error or set default colors
			});
		}


		function renderPieChart(visualization, data) {
			// Create a canvas element and add it to div visualizationsContainer
			addCanvasToContainer(visualization.id);

			// Count the occurrences of data
			const occurrences = countOccurrences(data);

			// Extract labels for the chart
			const labels = Object.keys(occurrences);

			// Get colors for each label asynchronously
			const colorPromises = labels.map(() => getRandomColorFromColorPalette(visualization.colorPaletteId));

			Promise.all(colorPromises).then(backgroundColors => {
				// Now backgroundColors is an array of resolved color strings
				const chartData = Object.values(occurrences);
				const ctx = document.getElementById(visualization.id).getContext('2d');

				// Create and draw the pie chart using Chart.js
				const myPieChart = new Chart(ctx, {
					type: 'pie',
					data: {
						labels: labels,
						datasets: [{
							label: visualization.title,
							data: chartData,
							backgroundColor: backgroundColors,
							borderWidth: 1
						}]
					},
					options: {
						responsive: true,
						plugins: {
							legend: {
								position: 'top',
							},
							title: {
								display: true,
								text: visualization.title
							}
						}
					}
				});
			}).catch(error => {
				console.error('Error fetching colors:', error);
				// Handle error or set default colors
			});
		}

		function countOccurrences(data) {
			const counts = {};
			data.forEach(item => {
				// Assumes the first property of the object is the key
				const key = item[Object.keys(item)[0]];
				if (key === undefined) return; // Skip if the item is empty or doesn't have properties

				if (!counts[key]) {
					counts[key] = 0;
				}
				counts[key]++;
			});
			return counts;
		}



		function addCanvasToContainer(visualizationId) {
			// Create a new canvas element
			const canvas = document.createElement('canvas');

			// Assign the ID based on the visualization.id
			canvas.id = visualizationId;

			// Set the size of the canvas drawing area
			canvas.width = 300;
			canvas.height = 300;

			// Set the display size of the canvas via inline styles
			canvas.style.width = '300px';
			canvas.style.height = '300px';

			// Create a wrapper div for the canvas
			const graphDiv = document.createElement('div');
			graphDiv.classList.add('graph');

			// Append the canvas to the wrapper div
			graphDiv.appendChild(canvas);

			// Create a remove for now button
			const removeForNowForButton = document.createElement('button');
			removeForNowForButton.innerHTML = '<i class="fas fa-eye-slash"></i>'; // Using innerHTML to include the FontAwesome icon
			removeForNowForButton.classList.add('btn', 'btn-secondary'); // Add Bootstrap classes for styling (optional)
			// Set the event listener for the delete button
			removeForNowForButton.onclick = function () {
				// Remove the wrapper div from the container
				graphDiv.remove();
			};
			// Append the delete button to the wrapper div
			graphDiv.appendChild(removeForNowForButton);


			// Create a delete button
			const deleteButton = document.createElement('button');
			deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
			deleteButton.classList.add('btn', 'btn-danger');

			// Set the event listener for the delete button
			deleteButton.onclick = (function (vId) {
				return function () {
					fetch(`/api/Visualization/deleteVisualization/${vId}`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						}
					})
						.then(response => {
							if (response.ok) {
								// If the API call was successful, remove the graphDiv from the UI
								graphDiv.remove();
							} else {
								// Handle the error case
								console.error('API call failed with status ', response.status);
							}
						})
						.catch(error => {
							// Handle any network errors
							console.error('Network error while calling API: ', error);
						});
				};
			})(visualizationId); // Pass visualizationId here

			graphDiv.appendChild(deleteButton);

			// Find the container div by its ID and append the wrapper div to it
			const container = document.getElementById('innerContainer');
			container.appendChild(graphDiv);
		}

		function getRandomColor() {
			const r = Math.floor(Math.random() * 256);
			const g = Math.floor(Math.random() * 256);
			const b = Math.floor(Math.random() * 256);
			return `rgba(${r}, ${g}, ${b}, 0.5)`;
		}

		function getRandomColorFromColorPalette(ColorPaletteId) {
			return fetch(`/api/ColorPalette/GetColorsFromColorPalette?paletteId=${ColorPaletteId}`)
				.then(response => {
					if (!response.ok) {
						throw new Error('Network response was not ok ' + response.statusText);
					}
					return response.json();
				})
				.then(colorArray => {
					if (colorArray.length > 0) {
						const randomIndex = Math.floor(Math.random() * colorArray.length);
						return colorArray[randomIndex]; // Return the color here
					} else {
						console.log("No colors found in the palette.");
						return null;
					}
				})
				.catch(error => {
					console.error('There has been a problem with your fetch operation:', error);
					return null;
				});
		}


		function hexToRgba(hex, opacity = 1) {
			// If the hex color is in the format #RRGGBBAA, trim the last two characters (alpha)
			if (hex.length === 9) {
				hex = hex.substring(0, 7);
			}

			let r = parseInt(hex.substring(1, 3), 16);
			let g = parseInt(hex.substring(3, 5), 16);
			let b = parseInt(hex.substring(5, 7), 16);

			return `rgba(${r}, ${g}, ${b}, ${opacity})`;
		}

	});
</script>


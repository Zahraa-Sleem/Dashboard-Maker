@{
	Layout = null;
}
<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="~/css/sideBar.css" />
	<link href="~/lib/font-awesome/css/fontawesome.css" rel="stylesheet" type="text/css" />
</head>
<body>
	<div class="sidebar">
		<a class="active">Dashboard Maker</a>
		<select id="dashboardDropdown" style="width:80%;"></select>
		<a href="/Dashboard/Create"><i class="fa-solid fa-table-columns"></i> New Dashboard</a>
		<a href="/Visualization/Create" id="createVisualizationLink"><i class="fa fa-bar-chart"></i>New Visualization</a>
		<a href="/DataSource/Add"><i class="fa fa-database"></i>New Data Source</a>
	</div>

	<div id="visualizationsContainer"></div>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			fetch('/api/Dashboard/GetUserDashboards')
				.then(response => {
					return response.json();
				})
				.then(data => {
					populateDropdown(data);
				})
				.catch(error => {
					console.error('Error fetching data:', error);
				});

			const dropdown = document.getElementById('dashboardDropdown');
			dropdown.addEventListener('change', function () {
				const selectedDashboardId = this.value;
				const createVisualizationLink = document.getElementById('createVisualizationLink');
				createVisualizationLink.href = '/Visualization/Create/' + selectedDashboardId;
				fetchAndDisplayVisualizations(selectedDashboardId);
			});

			function populateDropdown(data) {
				const dropdown = document.getElementById('dashboardDropdown');
				const option = new Option("Choose a dashboard", 0);
				dropdown.add(option);
				data.forEach(item => {
					const option = new Option(item.title, item.id);
					dropdown.add(option);
				});
			}
		});


		function fetchAndDisplayVisualizations(dashboardId) {
			fetch(`/api/Visualization/GetByDashboard/${dashboardId}`)
				.then(response => response.json())
				.then(visualizations => {
					// Step 1: Save or process the visualization data
					// Step 2: Fetch additional data based on the visualizations
					visualizations.forEach(visualization => {
						getDataToBePlotted(visualization).then(Data => {
							console.log(Data);
							// Step 3: Display data
							displayVisualizations(visualization, Data);
						});
					});
				})
				.catch(error => {
					console.error('Error fetching visualizations:', error);
				});
		}

		async function getDataToBePlotted(visualization) {
			try {
				const response = await fetch(`/api/Kata/GetDataForAGraph/${visualization.id}`);
				if (!response.ok) {
					throw new Error(`Network response was not ok: ${response.statusText}`);
				}
				return await response;
			} catch (error) {
				console.error('There was a problem with your fetch operation:', error);
				throw error;
			}
		}

		function displayVisualizations(visualization,Data) {
			// Determine the type of visualization and render accordingly
			switch (visualization.dataSourceType) {
				case 'LineChart':
					renderLineChart(Data);
					break;
				case 'barChart':
					renderBarChart(Data);
					break;
				case 'pieChart':
					renderPieChart(Data);
					break;
				// Add cases for other types of visualizations
				default:
					console.error('Unsupported visualization type:', visualization.type);
			}
		}

		function renderLineChart(data) {
		}

		function renderBarChart(data) {
		}

		function renderPieChart(data) {
		}

	</script>
</body>
</html>


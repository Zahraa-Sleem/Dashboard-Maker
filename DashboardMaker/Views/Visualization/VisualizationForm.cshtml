@model DashboardMaker.Models.ViewModels.VisualizationViewModel;

<style>
	body {
		background-color: #e9ecef;
	}

	.header {
		text-align: center;
		margin-bottom: 20px;
		background-color: #343a40;
		color: #ffffff;
		padding: 10px;
	}

	.container {
		background-color: #ffffff;
		margin-top: 50px;
		padding: 20px;
		border-radius: 10px;
	}

	.form-group label {
		color: #495057;
		font-weight: bold;
		margin-bottom: 5px;
		background-color: #f8f9fa;
		padding: 5px;
		border-radius: 5px;
	}

	.form-group .form-check-label {
		font-weight: normal;
		background-color: transparent;
	}

</style>


<div class="container">
	<div class="row justify-content-center">
		<div class="col-md-8">
			<form asp-action="Save" asp-controller="Visualization" method="post" enctype="multipart/form-data">
				<div asp-validation-summary="ModelOnly" class="text-danger"></div>
				<div class="form-group">
					<label asp-for="Visualization.Title" class="control-label"></label>
					<input asp-for="Visualization.Title" type="text" class="form-control" />
					<span asp-validation-for="Visualization.Title" class="text-danger"></span>
				</div>

				<br />

				<!-- VisualizationType Dropdown -->
				<div class="form-group">
					<label asp-for="Visualization.VisualizationTypeId" class="control-label">Visualization Type</label>
					<select id="visualizationTypeSelect" class="form-control" asp-for="Visualization.VisualizationTypeId">
						<option value="">Select Visualization Type</option>
					</select>
				</div>

				<br />

				<!-- DataSource Dropdown -->
				<div class="form-group">
					<label asp-for="Visualization.DataSourceId" class="control-label">Data Source</label>
					<select id="dataSourceSelect" class="form-control" asp-for="Visualization.DataSourceId" asp-items="@(new SelectList(Model.DataSources, "Id", "SourceName"))">
						<option value="">Select Data Source</option>
					</select>
				</div>

				<br />
				<!-- Color Palette Dropdown -->
				<!-- I need to display the colors also-->
				<div class="form-group">
					<label asp-for="Visualization.ColorPaletteId" class="control-label">Color Palette</label>
					<select class="form-control" asp-for="Visualization.ColorPaletteId">
						<option disabled selected>Select Color Palette</option>
						@foreach (var obj in Model.ColorPalettes)
						{
							<option value="@obj.Id">@obj.Name</option>
						}
					</select>
				</div>


				<!-- Hidden Inputs -->
				<input asp-for="Visualization.Id" type="hidden" />
				<input id="selectedDashboardId" asp-for=Visualization.DashboardId type="hidden">
				<input asp-for=Visualization.TablesColumns type="hidden" id="selectedTableAndColumns" />

				<br />

				<!-- IN CASE OF A DATABASE -->
				<!-- TABLES -->
				<div class="form-group" style="display: none;" id="tablesDiv">
					<label class="control-label">Choose a table:</label>
					<select id="tables">
						<option disabled>Select the table you want to create a dashboard from</option>
					</select>
				</div>

				<br />

				<!-- Table Columns-->
				<div class="form-group" style="display: none;" id="ColumnsDiv">
					<label class="control-label">Choose a column or two based on the type</label>
					<select id="columnsInitialSelect" multiple>
					</select>
				</div>

				<br />

				<div class="form-group">
					<button type="submit" class="btn btn-primary btn-block" style="background-color: #343a40;" id="submit">Save</button>
				</div>
			</form>
		</div>
	</div>
</div>


@section scripts {
	<script>
		$(document).ready(function () {
			var DataSources = @Html.Raw(Json.Serialize(Model.DataSources));
			$("#columnsInitialSelect").chosen({ width: '100%', search_contains: true })
			// Fetch and populate VisualizationType
			$.ajax({
				url: '/api/VisualizationType',
				method: 'GET',
				success: function (types) {
					types.forEach(function (type) {
						$('#visualizationTypeSelect').append(
							$('<option>', {
								value: type.id,
								text: type.type
							})
						);
					});
				}
			});

			// Show tables if the selected source is a database whether sql or mysql
			$('#dataSourceSelect').change(function () {
				$('#tables').empty();
				$("#tables").chosen("destroy");
				var selectedValue = $(this).val();
				var selectedDataSource = DataSources.find(ds => ds.id == selectedValue);
				$('#tablesDiv').css('display', 'none');
				$('#joinCheckBox').css('display', 'none');
				$('#ColumnsDiv').css('display', 'none');
				if (selectedDataSource && (selectedDataSource.dataSourceType == 'MySQL Database' || selectedDataSource.dataSourceType == 'SQL Database')) {
					$('#tablesDiv').css('display', 'block');
					$('#joinCheckBox').css('display', 'block');
					$('#ColumnsDiv').css('display', 'block');
					$.ajax({
						url: '/api/Kata/GetTables',
						type: 'GET',
						data: { dataSourceId: selectedValue },
						success: function (tables) {
							$('#tables').append($('<option>', {
								value: null,
								text: 'Choose a table',
								selected: true,
								disabled: true
							}));
							tables.forEach(function (table) {
								$('#tables').append($('<option>', {
									value: table,
									text: table
								}));
								$('#joinTables').append($('<option>', {
									value: table,
									text: table
								}));
							});
							$("#tables").chosen({ width: '100%', search_contains: true })
						}
					});
				}
			});

			$('#tables').change(function () {
				$('#columnsInitialSelect').empty();
				$("#columnsInitialSelect").chosen("destroy")
				var selectedTable = $(this).val();
				var selectedDataSource = $('#dataSourceSelect').val();
				$.ajax({
					url: '/api/Kata/GetColumns',
					type: 'GET',
					data: { dataSourceId: selectedDataSource, tableName: selectedTable },
					success: function (columns) {
						columns.forEach(function (column) {
							$('#columnsInitialSelect').append($('<option>', {
								value: column,
								text: column
							}));
						});
						$("#columnsInitialSelect").chosen({ width: '100%', search_contains: true })
					}
				});
			});

			// Function to count the number of selected columns
			function countSelectedColumns() {
				return $('#columnsInitialSelect').find('option:selected').length;
			}

			function getSelectedColumnValues() {
				// This will retrieve an array of selected option values
				var selectedValues = $('#columnsInitialSelect').find('option:selected').map(function () {
					return this.value;
				}).get();

				return selectedValues;
			}

			//function validateColumnSelection() {
			//	var selectedChartType = $('#visualizationTypeSelect').val();
			//	var selectedColumnCount = countSelectedColumns();
			//	var selectedColumns = getSelectedColumnValues();

			//	// Check if the selected chart type is 'Line Chart'
			//	if (selectedChartType == 2) {
			//		if (selectedColumnCount !== 2) {
			//			alert("Please select exactly 2 columns for a Line Chart.");
			//			return false;
			//		}
			//		else {
			//			var selectedDataSourceId = $('#dataSourceSelect').val();
			//			var selectedTable = $('#tables').val();
			//			// Fetch the data types of the selected columns
			//			$.ajax({
			//				url: '/api/Kata/getColumnsTypes',
			//				method: 'Get',
			//				contentType: 'application/json',
			//				data: {
			//					selectedColumns: JSON.stringify(selectedColumns),
			//					DataSourceId: selectedDataSourceId,
			//					TableName: selectedTable
			//				},
			//				success: function (data) {
			//					// Assuming 'data' is an array of objects with column types
			//					// e.g., [{ columnType: 'int' }, { columnType: 'string' }]
			//					const hasNumericColumn = data.some(column => ['int', 'decimal', 'float'].includes(column.dataType));

			//					if (!hasNumericColumn) {
			//						alert("Please ensure one of the selected columns is numerical (int, double, etc) for a Line Chart.");
			//						return false;
			//					}
			//					return true;
			//				},
			//				error: function (xhr, status, error) {
			//					console.error('Error fetching column types:', error);
			//					alert("error fetching");
			//					return false;
			//				}
			//			});

			//		}
			//	}
			//	else {
			//		if (selectedColumnCount !== 1) {
			//			alert("Please select only 1 column for bar charts and pie charts.");
			//			return false;
			//		}
			//		return true;
			//	}
			//	return false;
			//}

			//// Function to validate the selection based on the chart type
			function validateColumnSelection() {
				return new Promise((resolve, reject) => {
					var selectedChartType = $('#visualizationTypeSelect').val();
					var selectedColumnCount = countSelectedColumns();
					var selectedColumns = getSelectedColumnValues();

					if (selectedChartType == 2) {
						if (selectedColumnCount !== 2) {
							alert("Please select exactly 2 columns for a Line Chart.");
							console.log("3");
							reject(false);
						} else {
							var selectedDataSourceId = $('#dataSourceSelect').val();
							var selectedTable = $('#tables').val();

							$.ajax({
								url: '/api/Kata/getColumnsTypes',
								method: 'GET',
								contentType: 'application/json',
								data: {
									selectedColumns: JSON.stringify(selectedColumns),
									DataSourceId: selectedDataSourceId,
									TableName: selectedTable
								},
								success: function (data) {
									const hasNumericColumn = data.some(column => ['int', 'decimal', 'float'].includes(column.dataType));

									if (!hasNumericColumn) {
										alert("Please ensure one of the selected columns is numerical (int, double, etc) for a Line Chart.");
										reject(false);
									} else {
										resolve(true);
									}
								},
								error: function (xhr, status, error) {
									console.error('Error fetching column types:', error);
									alert("error fetching");
									reject(false);
								}
							});
						}
					} else {
						if (selectedColumnCount !== 1) {
							alert("Please select only 1 column for bar charts and pie charts.");
							reject(false);
						} else {
							resolve(true);
						}
					}
				});
			}


			// Function to gather data and save as JSON
			function saveSelectedTableAndColumns() {
				var selectedTable = $('#tables').val();
				var selectedColumns = $('#columnsInitialSelect').val(); // This will be an array of selected values

				var tableAndColumns = {
					table: selectedTable,
					columns: selectedColumns
				};

				// Convert the object to a JSON string
				var json = JSON.stringify(tableAndColumns);

				// Assign this JSON string to the hidden input field
				$('#selectedTableAndColumns').val(json);
			}

			$('#submit').click(function (e) {
				if (!validateColumnSelection()) {
					e.preventDefault(); // Prevent form submission if validation fails
				}
				saveSelectedTableAndColumns();
				// the form will submit automatically
			});
		});
	</script>
}



